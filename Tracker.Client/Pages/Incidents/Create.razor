@page "/incidents/new"
@using Tracker.Client.Models
@using Tracker.Client.Services
@using Tracker.Shared.Auth
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@inject IIncidentService IncidentService
@inject IIndividualService IndividualService
@inject IOrganizationService OrganizationService
@inject NavigationManager NavigationManager
@inject ILogger<Create> Logger

<PageTitle>Report New Incident</PageTitle>

<div class="lg:flex lg:items-center lg:justify-between mb-6">
    <div class="flex-1 min-w-0">
        <nav class="flex" aria-label="Breadcrumb">
            <ol class="flex items-center space-x-4">
                <li>
                    <div>
                        <a href="/incidents" class="text-sm font-medium text-gray-500 hover:text-gray-700">Incidents</a>
                    </div>
                </li>
                <li>
                    <div class="flex items-center">
                        <svg class="flex-shrink-0 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                        </svg>
                        <span class="ml-4 text-sm font-medium text-gray-500">Report New</span>
                    </div>
                </li>
            </ol>
        </nav>
        <h2 class="mt-2 text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">Report New Incident</h2>
    </div>
</div>

<div class="bg-white shadow overflow-hidden sm:rounded-lg">
    <div class="px-4 py-5 sm:p-6">
        <EditForm Model="@createModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="mb-4 p-4 bg-red-50 text-red-700 rounded-md" />

            <div class="space-y-6">
                <!-- Basic Information Section -->
                <div>
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Incident Details</h3>
                    <p class="mt-1 text-sm text-gray-500">Provide the essential information about the incident.</p>
                </div>

                <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                    <!-- Title -->
                    <div class="sm:col-span-6">
                        <label for="title" class="block text-sm font-medium text-gray-700">Title *</label>
                        <div class="mt-1">
                            <InputText id="title" @bind-Value="createModel.Title" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                            <ValidationMessage For="@(() => createModel.Title)" class="mt-1 text-sm text-red-600" />
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="sm:col-span-6">
                        <label for="description" class="block text-sm font-medium text-gray-700">Description *</label>
                        <div class="mt-1">
                            <InputTextArea id="description" @bind-Value="createModel.Description" rows="6" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                            <p class="mt-2 text-sm text-gray-500">Provide a detailed description of the incident. Markdown is supported.</p>
                            <ValidationMessage For="@(() => createModel.Description)" class="mt-1 text-sm text-red-600" />
                        </div>
                    </div>

                    <!-- Priority -->
                    <div class="sm:col-span-3">
                        <label for="priority" class="block text-sm font-medium text-gray-700">Priority *</label>
                        <div class="mt-1">
                            <InputSelect id="priority" @bind-Value="createModel.Priority" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">Select a priority</option>
                                <option value="Low">Low</option>
                                <option value="Medium">Medium</option>
                                <option value="High">High</option>
                                <option value="Critical">Critical</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => createModel.Priority)" class="mt-1 text-sm text-red-600" />
                        </div>
                    </div>

                    <!-- Type -->
                    <div class="sm:col-span-3">
                        <label for="type" class="block text-sm font-medium text-gray-700">Type</label>
                        <div class="mt-1">
                            <InputText id="type" @bind-Value="createModel.Type" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" placeholder="e.g., Bug, Feature, Security" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Related Items Section -->
            <div class="mt-8 pt-8 border-t border-gray-200">
                <div>
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Related Items</h3>
                    <p class="mt-1 text-sm text-gray-500">Optionally link this incident to other entities in the system.</p>
                </div>

                <div class="mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                    <!-- Individual -->
                    <div class="sm:col-span-3">
                        <label for="individualId" class="block text-sm font-medium text-gray-700">Related Individual</label>
                        <div class="mt-1 flex rounded-md shadow-sm">
                            <InputSelect id="individualId" @bind-Value="createModel.IndividualId" class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-l-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300">
                                <option value="">Select an individual</option>
                                @if (individuals != null)
                                {
                                    @foreach (var individual in individuals)
                                    {
                                        <option value="@individual.Id">@individual.FullName</option>
                                    }
                                }
                            </InputSelect>
                            <a href="/individuals/new" class="inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-300 bg-gray-50 text-gray-500 text-sm hover:bg-gray-100">
                                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>

                    <!-- Organization -->
                    <div class="sm:col-span-3">
                        <label for="organizationId" class="block text-sm font-medium text-gray-700">Related Organization</label>
                        <div class="mt-1 flex rounded-md shadow-sm">
                            <InputSelect id="organizationId" @bind-Value="createModel.OrganizationId" class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-l-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300">
                                <option value="">Select an organization</option>
                                @if (organizations != null)
                                {
                                    @foreach (var org in organizations)
                                    {
                                        <option value="@org.Id">@org.Name</option>
                                    }
                                }
                            </InputSelect>
                            <a href="/organizations/new" class="inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-300 bg-gray-50 text-gray-500 text-sm hover:bg-gray-100">
                                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="mt-8 pt-5 border-t border-gray-200">
                <div class="flex justify-end space-x-3">
                    <button type="button" @onclick="() => NavigationManager.NavigateTo('/incidents')" class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Cancel
                    </button>
                    <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span>Creating...</span>
                        }
                        else
                        {
                            <span>Create Incident</span>
                        }
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateIncidentModel createModel = new();
    private bool isSubmitting = false;
    private List<IndividualDto> individuals = new();
    private List<OrganizationDto> organizations = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load related data in parallel
            var tasks = new List<Task>();
            
            tasks.Add(Task.Run(async () => 
            {
                try { individuals = (await IndividualService.GetIndividualsAsync(1, 1000)).Items.ToList(); }
                catch (Exception ex) { Logger.LogError(ex, "Error loading individuals"); }
            }));
            
            tasks.Add(Task.Run(async () => 
            {
                try { organizations = (await OrganizationService.GetOrganizationsAsync(1, 1000)).Items.ToList(); }
                catch (Exception ex) { Logger.LogError(ex, "Error loading organizations"); }
            }));
            
            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading form data");
            // In a real app, you would show an error message to the user
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            
            var createDto = new CreateIncidentDto
            {
                Title = createModel.Title,
                Description = createModel.Description,
                Type = createModel.Type,
                Priority = createModel.Priority,
                IndividualId = string.IsNullOrEmpty(createModel.IndividualId) ? null : createModel.IndividualId,
                OrganizationId = string.IsNullOrEmpty(createModel.OrganizationId) ? null : createModel.OrganizationId
            };

            var result = await IncidentService.CreateIncidentAsync(createDto);
            
            if (result != null)
            {
                // Navigate to the newly created incident
                NavigationManager.NavigateTo($"/incidents/{result.Id}");
            }
            else
            {
                // In a real app, you would show an error message to the user
                Logger.LogError("Failed to create incident");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating incident");
            // In a real app, you would show an error message to the user
        }
        finally
        {
            isSubmitting = false;
        }
    }

    // Model for the create form with validation attributes
    public class CreateIncidentModel
    {
        [Required(ErrorMessage = "Title is required")]
        [StringLength(200, ErrorMessage = "Title cannot exceed 200 characters")]
        public string Title { get; set; }

        [Required(ErrorMessage = "Description is required")]
        [StringLength(10000, ErrorMessage = "Description is too long")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Priority is required")]
        public string Priority { get; set; } = "Medium";

        [StringLength(100, ErrorMessage = "Type cannot exceed 100 characters")]
        public string Type { get; set; }

        public string IndividualId { get; set; }
        public string OrganizationId { get; set; }
    }
}
