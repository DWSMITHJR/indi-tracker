@page "/incidents/{IncidentId}/timeline"
@using Tracker.Client.Services
@using Tracker.Shared.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ITimelineService TimelineService
@inject NavigationManager NavigationManager
@inject ILogger<Timeline> Logger
@inject IToastService ToastService

<PageTitle>Incident Timeline</PageTitle>

<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header with back button and title -->
    <div class="md:flex md:items-center md:justify-between mb-8">
        <div class="flex-1 min-w-0">
            <button @onclick="@(() => NavigationManager.NavigateTo($"/incidents/{IncidentId}"))" 
                    class="inline-flex items-center text-sm font-medium text-indigo-600 hover:text-indigo-900 mb-4">
                <svg class="flex-shrink-0 -ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                </svg>
                Back to Incident
            </button>
            <h1 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">Incident Timeline</h1>
        </div>
        <div class="mt-4 flex md:mt-0 md:ml-4">
            <button @onclick="@ShowAddEntryModal" 
                    class="ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                </svg>
                Add Entry
            </button>
        </div>
    </div>

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="flex justify-center items-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
        </div>
    }
    else if (timelineEntries == null || !timelineEntries.Any())
    {
        <!-- Empty State -->
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No timeline entries</h3>
            <p class="mt-1 text-sm text-gray-500">Get started by adding a new timeline entry.</p>
            <div class="mt-6">
                <button @onclick="@ShowAddEntryModal" 
                        class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                    </svg>
                    New Entry
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Timeline -->
        <div class="flow-root">
            <ul class="-mb-8">
                @foreach (var entry in timelineEntries.OrderByDescending(e => e.Timestamp))
                {
                    <li>
                        <div class="relative pb-8">
                            <!-- Timeline connector -->
                            @if (entry != timelineEntries.Last())
                            {
                                <span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
                            }
                            
                            <div class="relative flex space-x-3">
                                <div>
                                    <span class="h-8 w-8 rounded-full bg-indigo-500 flex items-center justify-center ring-8 ring-white">
                                        <span class="text-white text-sm font-medium">
                                            @(string.IsNullOrEmpty(entry.UpdatedByName) ? "?" : entry.UpdatedByName.Split(' ').Select(n => n[0]).Take(2).ToArray())
                                        </span>
                                    </span>
                                </div>
                                <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                                    <div class="flex-1">
                                        <p class="text-sm text-gray-500">
                                            <span class="font-medium text-gray-900">@entry.UpdatedByName</span>
                                            <span> @entry.Event</span>
                                        </p>
                                        <p class="text-sm text-gray-500">
                                            <time datetime="@entry.Timestamp.ToString("yyyy-MM-ddTHH:mm:ssZ")">
                                                @entry.Timestamp.ToString("MMM d, yyyy 'at' h:mm tt")
                                            </time>
                                        </p>
                                        @if (!string.IsNullOrEmpty(entry.Description))
                                        {
                                            <div class="mt-2 text-sm text-gray-700 bg-gray-50 p-3 rounded-md">
                                                @entry.Description
                                            </div>
                                        }
                                    </div>
                                    <div class="text-right text-sm whitespace-nowrap text-gray-500">
                                        <button @onclick="@(() => ShowDeleteConfirmation(entry.Id))" 
                                                class="text-gray-400 hover:text-red-600 focus:outline-none"
                                                title="Delete entry">
                                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
    }
</div>

<!-- Add Timeline Entry Modal -->
@if (showAddEntryModal)
{
    <div class="fixed z-10 inset-0 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true" @onclick="() => showAddEntryModal = false"></div>

            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

            <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
                <div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Add Timeline Entry
                        </h3>
                        <div class="mt-2">
                            <EditForm Model="@newEntry" OnValidSubmit="AddNewEntry">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="mb-4 p-4 bg-red-50 text-red-700 rounded-md" />

                                <div class="space-y-4">
                                    <div>
                                        <label for="event" class="block text-sm font-medium text-gray-700">Event *</label>
                                        <div class="mt-1">
                                            <InputText id="event" @bind-Value="newEntry.Event" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                                            <ValidationMessage For="@(() => newEntry.Event)" class="mt-1 text-sm text-red-600" />
                                        </div>
                                    </div>

                                    <div>
                                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                                        <div class="mt-1">
                                            <InputTextArea id="description" @bind-Value="newEntry.Description" rows="4" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"></InputTextArea>
                                        </div>
                                    </div>
                                </div>

                                <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                                    <button type="submit" 
                                            class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm"
                                            disabled="@isSubmitting">
                                        @if (isSubmitting)
                                        {
                                            <span>Adding...</span>
                                        }
                                        else
                                        {
                                            <span>Add Entry</span>
                                        }
                                    </button>
                                    <button type="button" 
                                            class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm"
                                            @onclick="() => showAddEntryModal = false"
                                            disabled="@isSubmitting">
                                        Cancel
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteConfirmation)
{
    <div class="fixed z-10 inset-0 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>

            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

            <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Delete Timeline Entry
                        </h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500">
                                Are you sure you want to delete this timeline entry? This action cannot be undone.
                            </p>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                    <button type="button" 
                            class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
                            @onclick="DeleteEntry"
                            disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span>Deleting...</span>
                        }
                        else
                        {
                            <span>Delete</span>
                        }
                    </button>
                    <button type="button" 
                            class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm"
                            @onclick="() => { showDeleteConfirmation = false; entryToDelete = null; }"
                            disabled="@isDeleting">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string IncidentId { get; set; } = string.Empty;

    private List<TimelineEntryDto> timelineEntries = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isDeleting = false;
    private bool showAddEntryModal = false;
    private bool showDeleteConfirmation = false;
    private string entryToDelete = string.Empty;
    
    private CreateTimelineEntryDto newEntry = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTimelineEntries();
    }

    private async Task LoadTimelineEntries()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            var entries = await TimelineService.GetTimelineForIncidentAsync(IncidentId);
            timelineEntries = entries?.ToList() ?? new List<TimelineEntryDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading timeline entries for incident {IncidentId}", IncidentId);
            ToastService.ShowError("Failed to load timeline entries. Please try again later.", "Error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowAddEntryModal()
    {
        newEntry = new CreateTimelineEntryDto();
        showAddEntryModal = true;
    }

    private async Task AddNewEntry()
    {
        try
        {
            isSubmitting = true;
            StateHasChanged();
            
            // Basic validation
            if (string.IsNullOrWhiteSpace(newEntry.Event))
            {
                ToastService.ShowWarning("Event is required", "Validation Error");
                return;
            }

            var result = await TimelineService.AddTimelineEntryAsync(IncidentId, newEntry);
            if (result != null)
            {
                // Refresh the timeline
                await LoadTimelineEntries();
                showAddEntryModal = false;
                ToastService.ShowSuccess("Timeline entry added successfully", "Success");
            }
            else
            {
                ToastService.ShowError("Failed to add timeline entry. Please try again.", "Error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding timeline entry to incident {IncidentId}", IncidentId);
            ToastService.ShowError("An error occurred while adding the timeline entry. Please try again.", "Error");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void ShowDeleteConfirmation(string entryId)
    {
        entryToDelete = entryId;
        showDeleteConfirmation = true;
    }

    private async Task DeleteEntry()
    {
        if (string.IsNullOrEmpty(entryToDelete))
        {
            showDeleteConfirmation = false;
            StateHasChanged();
            return;
        }

        try
        {
            isDeleting = true;
            StateHasChanged();
            
            var success = await TimelineService.DeleteTimelineEntryAsync(IncidentId, entryToDelete);
            if (success)
            {
                // Refresh the timeline
                await LoadTimelineEntries();
                ToastService.ShowSuccess("Timeline entry deleted successfully", "Success");
            }
            else
            {
                ToastService.ShowError("Failed to delete timeline entry. Please try again.", "Error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting timeline entry {EntryId} from incident {IncidentId}", entryToDelete, IncidentId);
            ToastService.ShowError("An error occurred while deleting the timeline entry. Please try again.", "Error");
        }
        finally
        {
            isDeleting = false;
            showDeleteConfirmation = false;
            entryToDelete = null;
            StateHasChanged();
        }
    }
}
