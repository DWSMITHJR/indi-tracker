@page "/incidents/{id}/edit"
@using Tracker.Client.Models
@using Tracker.Client.Services
@using Tracker.Shared.Auth
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@inject IIncidentService IncidentService
@inject IIndividualService IndividualService
@inject IOrganizationService OrganizationService
@inject NavigationManager NavigationManager
@inject ILogger<Edit> Logger

<PageTitle>Edit Incident @(incident?.IncidentNumber ?? "")</PageTitle>

@if (isLoading)
{
    <div class="flex justify-center items-center p-8">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
    </div>
}
else if (incident == null)
{
    <div class="bg-white shadow overflow-hidden sm:rounded-lg">
        <div class="px-4 py-5 sm:px-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900">Incident not found</h3>
            <p class="mt-1 max-w-2xl text-sm text-gray-500">The requested incident could not be found.</p>
        </div>
        <div class="px-4 py-4 sm:px-6">
            <button @onclick="() => NavigationManager.NavigateTo('/incidents')" 
                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Back to Incidents
            </button>
        </div>
    </div>
}
else
{
    <div class="lg:flex lg:items-center lg:justify-between mb-6">
        <div class="flex-1 min-w-0">
            <nav class="flex" aria-label="Breadcrumb">
                <ol class="flex items-center space-x-4">
                    <li>
                        <div>
                            <a href="/incidents" class="text-sm font-medium text-gray-500 hover:text-gray-700">Incidents</a>
                        </div>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <svg class="flex-shrink-0 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                            </svg>
                            <a href="/incidents/@incident.Id" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">@incident.IncidentNumber</a>
                        </div>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <svg class="flex-shrink-0 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                            </svg>
                            <span class="ml-4 text-sm font-medium text-gray-500">Edit</span>
                        </div>
                    </li>
                </ol>
            </nav>
            <h2 class="mt-2 text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">Edit Incident</h2>
        </div>
    </div>

    <div class="bg-white shadow overflow-hidden sm:rounded-lg">
        <div class="px-4 py-5 sm:p-6">
            <EditForm Model="@editModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="mb-4 p-4 bg-red-50 text-red-700 rounded-md" />

                <div class="space-y-6">
                    <!-- Basic Information Section -->
                    <div>
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Basic Information</h3>
                        <p class="mt-1 text-sm text-gray-500">Update the basic details of the incident.</p>
                    </div>

                    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                        <!-- Title -->
                        <div class="sm:col-span-6">
                            <label for="title" class="block text-sm font-medium text-gray-700">Title *</label>
                            <div class="mt-1">
                                <InputText id="title" @bind-Value="editModel.Title" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                                <ValidationMessage For="@(() => editModel.Title)" class="mt-1 text-sm text-red-600" />
                            </div>
                        </div>

                        <!-- Description -->
                        <div class="sm:col-span-6">
                            <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                            <div class="mt-1">
                                <InputTextArea id="description" @bind-Value="editModel.Description" rows="4" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                                <p class="mt-2 text-sm text-gray-500">Provide a detailed description of the incident. Markdown is supported.</p>
                            </div>
                        </div>

                        <!-- Status -->
                        <div class="sm:col-span-3">
                            <label for="status" class="block text-sm font-medium text-gray-700">Status *</label>
                            <div class="mt-1">
                                <InputSelect id="status" @bind-Value="editModel.Status" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a status</option>
                                    <option value="Open">Open</option>
                                    <option value="In Progress">In Progress</option>
                                    <option value="Resolved">Resolved</option>
                                    <option value="Closed">Closed</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => editModel.Status)" class="mt-1 text-sm text-red-600" />
                            </div>
                        </div>

                        <!-- Priority -->
                        <div class="sm:col-span-3">
                            <label for="priority" class="block text-sm font-medium text-gray-700">Priority *</label>
                            <div class="mt-1">
                                <InputSelect id="priority" @bind-Value="editModel.Priority" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a priority</option>
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                    <option value="Critical">Critical</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => editModel.Priority)" class="mt-1 text-sm text-red-600" />
                            </div>
                        </div>

                        <!-- Type -->
                        <div class="sm:col-span-3">
                            <label for="type" class="block text-sm font-medium text-gray-700">Type</label>
                            <div class="mt-1">
                                <InputText id="type" @bind-Value="editModel.Type" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                            </div>
                        </div>

                        <!-- Assigned To -->
                        <div class="sm:col-span-3">
                            <label for="assignedTo" class="block text-sm font-medium text-gray-700">Assigned To</label>
                            <div class="mt-1">
                                <InputText id="assignedTo" @bind-Value="editModel.AssignedTo" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                                <p class="mt-1 text-sm text-gray-500">Enter the name or email of the assignee</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Related Items Section -->
                <div class="mt-8 pt-8 border-t border-gray-200">
                    <div>
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Related Items</h3>
                        <p class="mt-1 text-sm text-gray-500">Associate this incident with related items.</p>
                    </div>
                    
                    <div class="mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                        <!-- Individual -->
                        <div class="sm:col-span-3">
                            <label for="individualId" class="block text-sm font-medium text-gray-700">Related Individual</label>
                            <div class="mt-1 flex rounded-md shadow-sm">
                                <InputSelect id="individualId" @bind-Value="editModel.IndividualId" class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-l-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300">
                                    <option value="">Select an individual</option>
                                    @foreach (var individual in individuals)
                                    {
                                        <option value="@individual.Id">@individual.FullName</option>
                                    }
                                </InputSelect>
                                <a href="/individuals/new" class="inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-300 bg-gray-50 text-gray-500 text-sm hover:bg-gray-100">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                            </div>
                        </div>

                        <!-- Organization -->
                        <div class="sm:col-span-3">
                            <label for="organizationId" class="block text-sm font-medium text-gray-700">Related Organization</label>
                            <div class="mt-1 flex rounded-md shadow-sm">
                                <InputSelect id="organizationId" @bind-Value="editModel.OrganizationId" class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-l-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300">
                                    <option value="">Select an organization</option>
                                    @foreach (var org in organizations)
                                    {
                                        <option value="@org.Id">@org.Name</option>
                                    }
                                </InputSelect>
                                <a href="/organizations/new" class="inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-300 bg-gray-50 text-gray-500 text-sm hover:bg-gray-100">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="mt-8 pt-5 border-t border-gray-200">
                    <div class="flex justify-end space-x-3">
                        <button type="button" @onclick='() => NavigationManager.NavigateTo($"/incidents/{Id}")' class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Cancel
                        </button>
                        <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <span>Save Changes</span>
                            }
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

@code {
    [Parameter]
    public string Id { get; set; }

    private Tracker.Shared.Models.IncidentDto incident;
    private EditIncidentModel editModel;
    private bool isLoading = true;
    private bool isSaving = false;
    private List<IndividualDto> individuals = new();
    private List<OrganizationDto> organizations = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load incident data
            incident = await IncidentService.GetIncidentByIdAsync(Id);
            editModel = new EditIncidentModel
            {
                Title = incident.Title,
                Description = incident.Description,
                Status = incident.Status,
                Priority = incident.Priority,
                Type = incident.Type,
                AssignedTo = incident.AssignedTo,
                IndividualId = incident.IndividualId,
                OrganizationId = incident.OrganizationId
            };

            // Load related data in parallel
            var tasks = new List<Task>();
            
            tasks.Add(Task.Run(async () => 
            {
                try { individuals = (await IndividualService.GetIndividualsAsync(1, 1000)).Items.ToList(); }
                catch (Exception ex) { Logger.LogError(ex, "Error loading individuals"); }
            }));
            
            tasks.Add(Task.Run(async () => 
            {
                try { organizations = (await OrganizationService.GetOrganizationsAsync(1, 1000)).Items.ToList(); }
                catch (Exception ex) { Logger.LogError(ex, "Error loading organizations"); }
            }));
            
            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading incident data");
            // In a real app, you would show an error message to the user
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSaving = true;
            
            // Create update DTO with only the changed fields
            var updateDto = new UpdateIncidentDto
            {
                Id = Id,
                Title = editModel.Title != incident.Title ? editModel.Title : null,
                Description = editModel.Description != incident.Description ? editModel.Description : null,
                Status = editModel.Status != incident.Status ? editModel.Status : null,
                Priority = editModel.Priority != incident.Priority ? editModel.Priority : null,
                Type = editModel.Type != incident.Type ? editModel.Type : null,
                AssignedTo = editModel.AssignedTo != incident.AssignedTo ? editModel.AssignedTo : null,
                IndividualId = editModel.IndividualId != incident.IndividualId ? editModel.IndividualId : null,
                OrganizationId = editModel.OrganizationId != incident.OrganizationId ? editModel.OrganizationId : null
            };

            var success = await IncidentService.UpdateIncidentAsync(updateDto);
            
            if (success)
            {
                // Navigate back to the incident details page
                NavigationManager.NavigateTo($"/incidents/{Id}");
            }
            else
            {
                // In a real app, you would show an error message to the user
                Logger.LogError("Failed to update incident");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating incident");
            // In a real app, you would show an error message to the user
        }
        finally
        {
            isSaving = false;
        }
    }

    // Model for the edit form with validation attributes
    public class EditIncidentModel
    {
        [Required(ErrorMessage = "Title is required")]
        [StringLength(200, ErrorMessage = "Title cannot exceed 200 characters")]
        public string Title { get; set; }

        public string Description { get; set; }

        [Required(ErrorMessage = "Status is required")]
        public string Status { get; set; }

        [Required(ErrorMessage = "Priority is required")]
        public string Priority { get; set; }

        public string Type { get; set; }
        public string AssignedTo { get; set; }
        public string IndividualId { get; set; }
        public string OrganizationId { get; set; }
    }
}
