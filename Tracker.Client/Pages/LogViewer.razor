@page "/logviewer"
@using Tracker.Client.Services
@using Microsoft.AspNetCore.Authorization
@inject ILogService LogService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin,Operator")]

<PageTitle>Log Viewer</PageTitle>

<div class="log-viewer-container">
    <div class="log-viewer-header">
        <h3><span class="oi oi-list-rich"></span> Application Logs</h3>
        <div class="log-viewer-controls">
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Search logs..." @bind="searchTerm" @bind:event="oninput" />
                <button class="btn btn-outline-secondary" type="button" @onclick="FilterLogs">
                    <span class="oi oi-magnifying-glass"></span>
                </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="RefreshLogs">
                    <span class="oi oi-reload"></span>
                </button>
            </div>
            
            <div class="log-filters">
                <select class="form-select log-level-filter" @bind="selectedLogLevel">
                    <option value="">All Levels</option>
                    <option value="Information">Information</option>
                    <option value="Warning">Warning</option>
                    <option value="Error">Error</option>
                    <option value="Critical">Critical</option>
                    <option value="Debug">Debug</option>
                    <option value="Trace">Trace</option>
                </select>
                
                <input type="date" class="form-control date-filter" @bind="startDate" />
                <span class="date-separator">to</span>
                <input type="date" class="form-control date-filter" @bind="endDate" />
            </div>
        </div>
    </div>

    <div class="log-entries">
        @if (isLoading)
        {
            <div class="text-center p-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading logs...</p>
            </div>
        }
        else if (logEntries?.Any() == true)
        {
            <div class="table-responsive">
                <table class="table table-hover log-table">
                    <thead class="table-light">
                        <tr>
                            <th>Timestamp</th>
                            <th>Level</th>
                            <th>Message</th>
                            <th>Source</th>
                            <th>User</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var log in logEntries)
                        {
                            <tr class="log-entry @GetLogLevelClass(log.Level)" @onclick="() => ShowLogDetails(log)">
                                <td>@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                <td><span class="badge @GetLogLevelBadgeClass(log.Level)">@log.Level</span></td>
                                <td>@(log.Message.Length > 100 ? log.Message.Substring(0, 100) + "..." : log.Message)</td>
                                <td>@log.Source</td>
                                <td>@(log.UserId ?? "System")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            <div class="log-pagination">
                <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(currentPage <= 1)">
                    <span class="oi oi-chevron-left"></span> Previous
                </button>
                <span class="page-info">Page @currentPage of @totalPages</span>
                <button class="btn btn-outline-primary" @onclick="NextPage" disabled="@(currentPage >= totalPages)">
                    Next <span class="oi oi-chevron-right"></span>
                </button>
            </div>
        }
        else
        {
            <div class="alert alert-info">No log entries found matching your criteria.</div>
        }
    </div>
</div>

@if (selectedLog != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Log Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseLogDetails" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="log-detail">
                        <div class="detail-row">
                            <span class="detail-label">Timestamp:</span>
                            <span class="detail-value">@selectedLog.Timestamp.ToString("yyyy-MM-dd HH:mm:ss.fff")</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Level:</span>
                            <span class="detail-value"><span class="badge @GetLogLevelBadgeClass(selectedLog.Level)">@selectedLog.Level</span></span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Source:</span>
                            <span class="detail-value">@selectedLog.Source</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">User:</span>
                            <span class="detail-value">@(selectedLog.UserId ?? "System")</span>
                        </div>
                        <div class="detail-row full-width">
                            <span class="detail-label">Message:</span>
                            <div class="log-message">@selectedLog.Message</div>
                        </div>
                        @if (!string.IsNullOrEmpty(selectedLog.Exception))
                        {
                            <div class="detail-row full-width">
                                <span class="detail-label">Exception:</span>
                                <div class="log-exception">
                                    <pre>@selectedLog.Exception</pre>
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(selectedLog.Properties) && selectedLog.Properties != "{}")
                        {
                            <div class="detail-row full-width">
                                <span class="detail-label">Properties:</span>
                                <div class="log-properties">
                                    <pre>@selectedLog.Properties</pre>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseLogDetails">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<LogEntry> logEntries = new();
    private LogEntry selectedLog;
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;
    private string searchTerm = string.Empty;
    private string selectedLogLevel = string.Empty;
    private DateTime? startDate;
    private DateTime? endDate;

    protected override async Task OnInitializedAsync()
    {
        startDate = DateTime.Today.AddDays(-7);
        endDate = DateTime.Today.AddDays(1);
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var result = await LogService.GetLogsAsync(
                pageNumber: currentPage,
                pageSize: pageSize,
                searchTerm: searchTerm,
                level: selectedLogLevel,
                startDate: startDate,
                endDate: endDate);

            logEntries = result.Items.ToList();
            totalPages = (int)Math.Ceiling((double)result.TotalCount / pageSize);
        }
        catch (Exception ex)
        {
            // In a real app, show a user-friendly error message
            Console.Error.WriteLine($"Error loading logs: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task FilterLogs()
    {
        currentPage = 1;
        await LoadLogs();
    }

    private async Task RefreshLogs()
    {
        await LoadLogs();
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadLogs();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadLogs();
        }
    }

    private void ShowLogDetails(LogEntry log)
    {
        selectedLog = log;
    }

    private void CloseLogDetails()
    {
        selectedLog = null;
    }

    private string GetLogLevelClass(string level)
    {
        return level?.ToLower() switch
        {
            "error" => "log-entry-error",
            "warning" => "log-entry-warning",
            "information" => "log-entry-info",
            "debug" => "log-entry-debug",
            "trace" => "log-entry-trace",
            _ => ""
        };
    }

    private string GetLogLevelBadgeClass(string level)
    {
        return level?.ToLower() switch
        {
            "error" => "bg-danger",
            "warning" => "bg-warning text-dark",
            "information" => "bg-info text-dark",
            "debug" => "bg-secondary",
            "trace" => "bg-light text-dark",
            _ => "bg-secondary"
        };
    }
}

<style>
    .log-viewer-container {
        padding: 1.5rem;
        background-color: #f8f9fa;
        border-radius: 0.5rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .log-viewer-header {
        margin-bottom: 1.5rem;
    }

    .log-viewer-header h3 {
        display: flex;
        align-items: center;
        color: #2c3e50;
    }

    .log-viewer-header h3 .oi {
        margin-right: 0.5rem;
        color: #6c757d;
    }

    .log-viewer-controls {
        margin-top: 1rem;
    }

    .log-filters {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.5rem;
        flex-wrap: wrap;
    }

    .log-level-filter {
        min-width: 150px;
    }

    .date-filter {
        max-width: 150px;
    }

    .date-separator {
        display: flex;
        align-items: center;
        color: #6c757d;
    }

    .log-entries {
        background-color: white;
        border-radius: 0.5rem;
        padding: 1rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.05);
    }

    .log-table {
        margin-bottom: 0;
    }

    .log-table th {
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.5px;
        color: #6c757d;
        border-top: none;
    }

    .log-entry {
        cursor: pointer;
        transition: background-color 0.15s ease-in-out;
    }

    .log-entry:hover {
        background-color: #f8f9fa;
    }

    .log-entry-error {
        border-left: 4px solid #dc3545;
    }

    .log-entry-warning {
        border-left: 4px solid #ffc107;
    }

    .log-entry-info {
        border-left: 4px solid #17a2b8;
    }

    .log-entry-debug {
        border-left: 4px solid #6c757d;
    }

    .log-entry-trace {
        border-left: 4px solid #e9ecef;
    }

    .log-pagination {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 0;
        margin-top: 1rem;
        border-top: 1px solid #e9ecef;
    }

    .page-info {
        font-weight: 500;
        color: #6c757d;
    }

    .log-detail {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .detail-row {
        display: flex;
        gap: 1rem;
        padding: 0.5rem 0;
        border-bottom: 1px solid #f1f1f1;
    }

    .detail-row:last-child {
        border-bottom: none;
    }

    .detail-label {
        font-weight: 600;
        min-width: 100px;
        color: #495057;
    }

    .detail-value {
        flex: 1;
        word-break: break-word;
    }

    .full-width {
        flex-direction: column;
        gap: 0.25rem;
    }

    .log-message {
        white-space: pre-wrap;
        background-color: #f8f9fa;
        padding: 0.75rem;
        border-radius: 0.25rem;
        font-family: 'Courier New', Courier, monospace;
        font-size: 0.9rem;
    }

    .log-exception,
    .log-properties {
        background-color: #f8f9fa;
        padding: 0.75rem;
        border-radius: 0.25rem;
        max-height: 300px;
        overflow-y: auto;
        font-family: 'Courier New', Courier, monospace;
        font-size: 0.85rem;
        white-space: pre-wrap;
    }

    .modal-content {
        border: none;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        border-bottom: 1px solid #e9ecef;
        background-color: #f8f9fa;
        border-top-left-radius: 0.3rem;
        border-top-right-radius: 0.3rem;
    }

    .modal-title {
        font-weight: 600;
        color: #2c3e50;
    }

    .btn-close {
        background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z'/%3e%3c/svg%3e") center/1em auto no-repeat;
        opacity: 0.5;
    }

    .btn-close:hover {
        opacity: 0.75;
    }

    .modal-backdrop {
        opacity: 0.5;
    }
</style>
