@page "/reset-password"
@using Tracker.Client.Services
@using Tracker.Shared.Auth
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILogger<ResetPassword> Logger

<PageTitle>Reset Password</PageTitle>

<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Reset your password
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Enter your new password below.
            </p>
        </div>

        <div class="mt-8 bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            @if (isPasswordReset)
            {
                <div class="rounded-md bg-green-50 p-4">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-green-800">
                                Your password has been reset successfully!
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="mt-6">
                    <button @onclick="() => NavigationManager.NavigateTo('/login')" 
                            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Back to Login
                    </button>
                </div>
            }
            else
            {
                <EditForm Model="@model" OnValidSubmit="HandleValidSubmit" class="space-y-6">
                    <input type="hidden" @bind="model.Email" />
                    <input type="hidden" @bind="model.Token" />
                    
                    <div>
                        <label for="password" class="block text-sm font-medium text-gray-700">New password</label>
                        <InputText id="password" type="password" @bind-Value="model.Password" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        <ValidationMessage For="@(() => model.Password)" class="text-red-600 text-sm" />
                    </div>

                    <div>
                        <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirm new password</label>
                        <InputText id="confirm-password" type="password" @bind-Value="model.ConfirmPassword" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        <ValidationMessage For="@(() => model.ConfirmPassword)" class="text-red-600 text-sm" />
                    </div>

                    <div>
                        <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Reset password
                        </button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="rounded-md bg-red-50 p-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <h3 class="text-sm font-medium text-red-800">
                                        @errorMessage
                                    </h3>
                                </div>
                            </div>
                        </div>
                    }
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    private ResetPasswordRequest model = new();
    private string errorMessage = string.Empty;
    private bool isPasswordReset = false;

    protected override void OnInitialized()
    {
        // Extract token and email from the URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        model.Email = query["email"];
        model.Token = query["token"];
        
        if (string.IsNullOrEmpty(model.Token) || string.IsNullOrEmpty(model.Email))
        {
            errorMessage = "Invalid password reset link. Please request a new one.";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            errorMessage = string.Empty;
            
            // In a real app, you would call your API to reset the password
            // For now, we'll just simulate a successful response
            await Task.Delay(1000); // Simulate API call
            
            isPasswordReset = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error resetting password");
            errorMessage = "An error occurred while resetting your password. Please try again.";
        }
    }
}
